import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by qmltyperegistrar.

Module {
    Component {
        file: "activectrl.h"
        name: "ActiveCtrl"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["ImageCraft/ActiveCtrl 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [256]
        Enum {
            name: "OperationType"
            values: [
                "MoveLayer",
                "ScaleLayer",
                "AddLayer",
                "ReMoveLayer",
                "ModifiedLayer",
                "VisibleLayer",
                "FlipXLayer",
                "FlipYLayer",
                "SpinLayer",
                "ScaleXYLayer"
            ]
        }
        Enum {
            name: "Filter"
            values: [
                "EmbossFilter",
                "OilPaintFilter",
                "OverexposureFilter",
                "DiffusionFilter",
                "GaussianBlurFilter",
                "MotionBlurFilter",
                "EnhancedBlurFilter",
                "LensBlurFilter",
                "WaveFilter",
                "RippleFilter",
                "WaterRippleFilter",
                "SqueezeFilter",
                "ShearFilter",
                "USMSharpeningFilter",
                "StabilizationFilter",
                "EdgeSharpeningFilter",
                "PixelationFilter",
                "CrystallizeFilter",
                "MosaicFilter",
                "FireEffectFilter",
                "MoltenEffectFilter",
                "DreamFilter",
                "FreezeColdFilter",
                "AnimeFilter",
                "VintageFilter",
                "LensFlareFilter",
                "RemoveNoiseFilter",
                "AddNoiseFilter"
            ]
        }
        Property {
            name: "savePath"
            type: "QString"
            read: "savePath"
            write: "setSavePath"
            notify: "savePathChanged"
            index: 0
            isFinal: true
        }
        Property {
            name: "currentEditor"
            type: "Editor"
            isPointer: true
            read: "currentEditor"
            write: "setCurrentEditor"
            notify: "currentEditorChanged"
            index: 1
            isFinal: true
        }
        Property {
            name: "newDialogBox"
            type: "QObject"
            isPointer: true
            read: "newDialogBox"
            write: "setNewDialogBox"
            notify: "newDialogBoxChanged"
            index: 2
            isFinal: true
        }
        Property {
            name: "currentLayer"
            type: "QObject"
            isPointer: true
            read: "currentLayer"
            write: "setCurrentLayer"
            notify: "currentLayerChanged"
            index: 3
            isFinal: true
        }
        Property {
            name: "savePathDialod"
            type: "QObject"
            isPointer: true
            read: "savePathDialod"
            write: "setSavePathDialod"
            notify: "savePathDialodChanged"
            index: 4
            isFinal: true
        }
        Property {
            name: "recentFiles"
            type: "QStringList"
            read: "recentFiles"
            write: "setRecentFiles"
            notify: "recentFilesChanged"
            index: 5
            isFinal: true
        }
        Property {
            name: "failToSave"
            type: "QObject"
            isPointer: true
            read: "failToSave"
            write: "setFailToSave"
            notify: "failToSaveChanged"
            index: 6
            isFinal: true
        }
        Property {
            name: "openDialogBox"
            type: "QObject"
            isPointer: true
            read: "openDialogBox"
            write: "setOpenDialogBox"
            notify: "openDialogBoxChanged"
            index: 7
            isFinal: true
        }
        Property {
            name: "sharePage"
            type: "QObject"
            isPointer: true
            read: "sharePage"
            write: "setSharePage"
            notify: "sharePageChanged"
            index: 8
            isFinal: true
        }
        Property {
            name: "modified"
            type: "bool"
            read: "modified"
            write: "setModified"
            notify: "modifiedChanged"
            index: 9
            isFinal: true
        }
        Property {
            name: "size"
            type: "QSize"
            read: "size"
            write: "setSize"
            notify: "sizeChanged"
            index: 10
            isFinal: true
        }
        Property {
            name: "currentIndex"
            type: "int"
            read: "currentIndex"
            write: "setCurrentIndex"
            notify: "currentIndexChanged"
            index: 11
            isFinal: true
        }
        Property {
            name: "exportPathDialog"
            type: "QObject"
            isPointer: true
            read: "exportPathDialog"
            write: "setExportPathDialog"
            notify: "exportPathDialogChanged"
            index: 12
            isFinal: true
        }
        Property {
            name: "askSaveDialog"
            type: "QObject"
            isPointer: true
            read: "askSaveDialog"
            write: "setAskSaveDialog"
            notify: "askSaveDialogChanged"
            index: 13
            isFinal: true
        }
        Property {
            name: "YScale"
            type: "int"
            read: "YScale"
            write: "setYScale"
            notify: "YScaleChanged"
            index: 14
            isFinal: true
        }
        Property {
            name: "XScale"
            type: "int"
            read: "XScale"
            write: "setXScale"
            notify: "XScaleChanged"
            index: 15
            isFinal: true
        }
        Property {
            name: "flip"
            type: "QObject"
            isPointer: true
            read: "flip"
            write: "setFlip"
            notify: "flipChanged"
            index: 16
            isFinal: true
        }
        Property {
            name: "currentImageView"
            type: "QObject"
            isPointer: true
            read: "currentImageView"
            write: "setCurrentImageView"
            notify: "currentImageViewChanged"
            index: 17
            isFinal: true
        }
        Property {
            name: "anglenum"
            type: "double"
            read: "anglenum"
            write: "setAnglenum"
            notify: "anglenumChanged"
            index: 18
            isFinal: true
        }
        Property {
            name: "rotationDialogBox"
            type: "QObject"
            isPointer: true
            read: "rotationDialogBox"
            write: "setRotationDialogBox"
            notify: "rotationDialogBoxChanged"
            index: 19
            isFinal: true
        }
        Property {
            name: "rightMenu"
            type: "QObject"
            isPointer: true
            read: "rightMenu"
            write: "setRightMenu"
            notify: "rightMenuChanged"
            index: 20
            isFinal: true
        }
        Property {
            name: "lcenterWidth"
            type: "int"
            read: "lcenterWidth"
            write: "setLcenterWidth"
            notify: "lcenterWidthChanged"
            index: 21
            isFinal: true
        }
        Property {
            name: "lcenterHeight"
            type: "int"
            read: "lcenterHeight"
            write: "setLcenterHeight"
            notify: "lcenterHeightChanged"
            index: 22
            isFinal: true
        }
        Property {
            name: "pasteImage"
            type: "QImage"
            read: "pasteImage"
            write: "setPasteImage"
            notify: "pasteImageChanged"
            index: 23
            isFinal: true
        }
        Property {
            name: "footer"
            type: "QObject"
            isPointer: true
            read: "footer"
            write: "setFooter"
            notify: "footerChanged"
            index: 24
            isFinal: true
        }
        Property {
            name: "toolBar"
            type: "QObject"
            isPointer: true
            read: "toolBar"
            write: "setToolBar"
            notify: "toolBarChanged"
            index: 25
            isFinal: true
        }
        Property {
            name: "currentFilter"
            type: "Filter"
            read: "getCurrentFilter"
            write: "setCurrentFilter"
            notify: "currentFilterChanged"
            index: 26
            isFinal: true
        }
        Property {
            name: "manualDialog"
            type: "QObject"
            isPointer: true
            read: "manualDialog"
            write: "setManualDialog"
            notify: "manualDialogChanged"
            index: 27
            isFinal: true
        }
        Property {
            name: "instructionDialog"
            type: "QObject"
            isPointer: true
            read: "instructionDialog"
            write: "setInstructionDialog"
            notify: "instructionDialogChanged"
            index: 28
            isFinal: true
        }
        Signal { name: "dialogBoxChanged" }
        Signal { name: "currentEditorChanged" }
        Signal { name: "newDialogBoxChanged" }
        Signal { name: "currentLayerChanged" }
        Signal { name: "savePathDialodChanged" }
        Signal { name: "savePathChanged" }
        Signal { name: "modifiedChanged" }
        Signal { name: "sizeChanged" }
        Signal { name: "recentFilesChanged" }
        Signal { name: "failToSaveChanged" }
        Signal { name: "openDialogBoxChanged" }
        Signal { name: "sharePageChanged" }
        Signal { name: "currentIndexChanged" }
        Signal { name: "refreshSignal" }
        Signal { name: "exportPathDialogChanged" }
        Signal { name: "askSaveDialogChanged" }
        Signal { name: "saved" }
        Signal { name: "closed" }
        Signal { name: "YScaleChanged" }
        Signal { name: "XScaleChanged" }
        Signal { name: "flipChanged" }
        Signal { name: "closeAlled" }
        Signal { name: "currentImageViewChanged" }
        Signal { name: "anglenumChanged" }
        Signal { name: "rotationDialogBoxChanged" }
        Signal { name: "rightMenuChanged" }
        Signal { name: "lcenterWidthChanged" }
        Signal { name: "lcenterHeightChanged" }
        Signal { name: "pasteImageChanged" }
        Signal { name: "footerChanged" }
        Signal { name: "toolBarChanged" }
        Signal { name: "currentFilterChanged" }
        Signal { name: "manualDialogChanged" }
        Signal { name: "instructionDialogChanged" }
        Method { name: "openSlot" }
        Method { name: "saveAsSlot" }
        Method { name: "exportSlot" }
        Method { name: "askSave_saveSlot" }
        Method { name: "askSave_discardSlot" }
        Method { name: "askSave_cancelSlot" }
        Method { name: "closeAllSlot" }
        Method { name: "exitSlot" }
        Method { name: "open" }
        Method { name: "newImage" }
        Method { name: "save" }
        Method { name: "saveAs" }
        Method { name: "close" }
        Method { name: "closeAll" }
        Method {
            name: "addRecentFiles"
            Parameter { name: "filePath"; type: "QString" }
        }
        Method {
            name: "getAngle"
            Parameter { name: "angle"; type: "double" }
        }
        Method { name: "openDialog" }
        Method { name: "openManualDialog" }
        Method { name: "openInstructionDialog" }
        Method {
            name: "rotation"
            Parameter { name: "rotationstyle"; type: "QString" }
            Parameter { name: "rotationangle"; type: "double" }
        }
        Method { name: "leftRotation" }
        Method { name: "rightRotation" }
        Method { name: "verticallyFlip" }
        Method { name: "horizontallyFlip" }
        Method { name: "refresh" }
        Method { name: "takeAFullScreenshot" }
        Method { name: "exportImage" }
        Method { name: "exitWindow" }
        Method {
            name: "popRightMenu"
            Parameter { name: "x"; type: "QVariant" }
            Parameter { name: "y"; type: "QVariant" }
        }
        Method { name: "deleteLayer" }
        Method { name: "applyEmbossFilter" }
        Method { name: "applyOilPaintFilter" }
        Method { name: "applyOverexposureFilter" }
        Method { name: "applyDiffusionFilter" }
        Method { name: "applyMosaicFilter" }
        Method { name: "applyGaussianBlurFilter" }
        Method { name: "applyMotionBlurFilter" }
        Method { name: "applyEnhancedBlurFilter" }
        Method { name: "applyLensBlurFilter" }
        Method { name: "applyWaveFilter" }
        Method { name: "applyRippleFilter" }
        Method { name: "applySqueezeFilter" }
        Method { name: "applyShearFilter" }
        Method { name: "applyWaterRippleFilter" }
        Method { name: "applyUSMSharpeningFilter" }
        Method { name: "applyEdgeSharpeningFilter" }
        Method { name: "applyStabilizationFilter" }
        Method { name: "applyPixelationFilter" }
        Method { name: "applyCrystallizeFilter" }
        Method { name: "applyFireEffectFilter" }
        Method { name: "applyMoltenEffectFilter" }
        Method { name: "applyDreamFilter" }
        Method { name: "applyFreezeColdFilter" }
        Method { name: "applyAnimeFilter" }
        Method { name: "applyVintageFilter" }
        Method { name: "applyLensFlareFilter" }
        Method { name: "applyRemoveNoiseFilter" }
        Method { name: "applyAddNoiseFilter" }
        Method { name: "resetToOriginalImage" }
        Method { name: "resetToPreviousFilter" }
        Method { name: "undo" }
        Method { name: "redo" }
        Method { name: "copyImagetoClipboard" }
        Method { name: "pasteImageFromClipboard" }
        Method { name: "cutImagetoClipboard" }
        Method { name: "oppositedColor" }
        Method { name: "convertToGray" }
        Method { name: "convertToMonochromeDithered" }
        Method { name: "applyGaussianBlur" }
        Method { name: "footerVisible" }
        Method { name: "lefttoolbarDisplay" }
    }
    Component {
        file: "editor.h"
        name: "Editor"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["ImageCraft/Editor 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "image"
            type: "QImage"
            read: "image"
            write: "setImage"
            notify: "imageChanged"
            index: 0
            isFinal: true
        }
        Property {
            name: "path"
            type: "QString"
            read: "path"
            write: "setPath"
            notify: "pathChanged"
            index: 1
            isFinal: true
        }
        Signal { name: "imageChanged" }
        Signal { name: "pathChanged" }
        Signal { name: "brushColorChanged" }
        Signal { name: "brushSizeChanged" }
        Signal { name: "currentShapeChanged" }
        Signal { name: "previewImageChanged" }
        Signal { name: "tempImageChanged" }
        Signal { name: "imageStatusChanged" }
        Method {
            name: "setImage"
            Parameter { name: "newImage"; type: "QImage" }
        }
        Method {
            name: "openImage"
            Parameter { name: "path"; type: "QString" }
        }
        Method { name: "copyImage"; type: "QImage" }
    }
    Component {
        file: "toolctrl.h"
        name: "ToolCtrl"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["ImageCraft/ToolCtrl 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [256]
        Enum {
            name: "Shape"
            values: [
                "FreeDraw",
                "PenDraw",
                "SprayDraw",
                "Rectangle",
                "Ellipse",
                "Circle",
                "Polygon",
                "LineDraw",
                "PolylineDraw",
                "CurveDraw",
                "Eraser",
                "ColoredEraser"
            ]
        }
        Enum {
            name: "CapStyle"
            values: ["RoundCap", "SquareCap", "SlashCap", "BackSlashCap"]
        }
        Property {
            name: "showcolor"
            type: "QObject"
            isPointer: true
            read: "showcolor"
            write: "setShowcolor"
            notify: "showcolorChanged"
            index: 0
            isFinal: true
        }
        Property {
            name: "pointtext"
            type: "QObject"
            isPointer: true
            read: "pointtext"
            write: "setPointtext"
            notify: "pointtextChanged"
            index: 1
            isFinal: true
        }
        Property {
            name: "currentEditorView"
            type: "QObject"
            isPointer: true
            read: "currentEditorView"
            write: "setCurrentEditorView"
            notify: "currentEditorViewChanged"
            index: 2
            isFinal: true
        }
        Property {
            name: "zoom_size"
            type: "QObject"
            isPointer: true
            read: "zoom_size"
            write: "setZoom_size"
            notify: "zoom_sizeChanged"
            index: 3
            isFinal: true
        }
        Property {
            name: "zoomList"
            type: "QStringList"
            read: "zoomList"
            write: "setZoomList"
            notify: "zoomListChanged"
            index: 4
            isFinal: true
        }
        Property {
            name: "zoomSet"
            type: "std::set<int>"
            read: "zoomSet"
            write: "setZoomSet"
            notify: "zoomSetChanged"
            index: 5
            isFinal: true
        }
        Property {
            name: "imageSize"
            type: "QObject"
            isPointer: true
            read: "imageSize"
            write: "setImageSize"
            notify: "imageSizeChanged"
            index: 6
            isFinal: true
        }
        Property {
            name: "zoomRepeater"
            type: "QObject"
            isPointer: true
            read: "zoomRepeater"
            write: "setZoomRepeater"
            notify: "zoomRepeaterChanged"
            index: 7
            isFinal: true
        }
        Property {
            name: "zoomColumnLayout"
            type: "QObject"
            isPointer: true
            read: "zoomColumnLayout"
            write: "setZoomColumnLayout"
            notify: "zoomColumnLayoutChanged"
            index: 8
            isFinal: true
        }
        Property {
            name: "brushColor"
            type: "QColor"
            read: "brushColor"
            write: "setBrushColor"
            notify: "brushColorChanged"
            index: 9
            isFinal: true
        }
        Property {
            name: "brushSize"
            type: "int"
            read: "brushSize"
            write: "setCurrentBrushSize"
            notify: "brushSizeChanged"
            index: 10
            isFinal: true
        }
        Property {
            name: "currentShape"
            type: "Shape"
            read: "currentShape"
            write: "setCurrentShape"
            notify: "currentShapeChanged"
            index: 11
            isFinal: true
        }
        Property {
            name: "previewImage"
            type: "QImage"
            read: "previewImage"
            write: "setPreviewImage"
            notify: "previewImageChanged"
            index: 12
            isFinal: true
        }
        Property {
            name: "canvasImage"
            type: "QImage"
            read: "canvasImage"
            write: "setCanvasImage"
            notify: "canvasImageChanged"
            index: 13
            isFinal: true
        }
        Property {
            name: "canvasEditor"
            type: "Editor"
            isPointer: true
            read: "canvasEditor"
            write: "setCanvasEditor"
            notify: "canvasEditorChanged"
            index: 14
            isFinal: true
        }
        Property {
            name: "modelIndex"
            type: "int"
            read: "modelIndex"
            write: "setModelIndex"
            notify: "modelIndexChanged"
            index: 15
            isFinal: true
        }
        Property {
            name: "currentCapStyle"
            type: "CapStyle"
            read: "currentCapStyle"
            write: "setCurrentCapStyle"
            notify: "currentCapStyleChanged"
            index: 16
            isFinal: true
        }
        Property {
            name: "spraySize"
            type: "int"
            read: "spraySize"
            write: "setSpraySize"
            notify: "spraySizeChanged"
            index: 17
            isFinal: true
        }
        Property {
            name: "currentTextArea"
            type: "QObject"
            isPointer: true
            read: "currentTextArea"
            write: "setCurrentTextArea"
            notify: "currentTextAreaChanged"
            index: 18
            isFinal: true
        }
        Property {
            name: "wordItem"
            type: "QObject"
            isPointer: true
            read: "wordItem"
            write: "setWordItem"
            notify: "wordItemChanged"
            index: 19
            isFinal: true
        }
        Property {
            name: "fillRectangle"
            type: "bool"
            read: "fillRectangle"
            write: "setFillRectangle"
            notify: "fillRectangleChanged"
            index: 20
            isFinal: true
        }
        Property {
            name: "straw_SampleRecords"
            type: "QObject"
            isPointer: true
            read: "straw_SampleRecords"
            write: "setStraw_SampleRecords"
            notify: "straw_SampleRecordsChanged"
            index: 21
            isFinal: true
        }
        Property {
            name: "colorList"
            type: "QStringList"
            read: "colorList"
            write: "setColorList"
            notify: "colorListChanged"
            index: 22
            isFinal: true
        }
        Property {
            name: "colorSet"
            type: "std::set<QString>"
            read: "colorSet"
            write: "setColorSet"
            notify: "colorSetChanged"
            index: 23
            isFinal: true
        }
        Property {
            name: "eraserSize"
            type: "int"
            read: "eraserSize"
            write: "setEraserSize"
            notify: "eraserSizeChanged"
            index: 24
            isFinal: true
        }
        Property {
            name: "eraserOpacity"
            type: "int"
            read: "eraserOpacity"
            write: "setEraserOpacity"
            notify: "eraserOpacityChanged"
            index: 25
            isFinal: true
        }
        Property {
            name: "lineSize"
            type: "int"
            read: "lineSize"
            write: "setLineSize"
            notify: "lineSizeChanged"
            index: 26
            isFinal: true
        }
        Property {
            name: "PolyLineSize"
            type: "int"
            read: "PolyLineSize"
            write: "setPolyLineSize"
            notify: "PolyLineSizeChanged"
            index: 27
            isFinal: true
        }
        Property {
            name: "selectedTool"
            type: "int"
            read: "selectedTool"
            write: "setSelectedTool"
            notify: "selectedToolChanged"
            index: 28
            isFinal: true
        }
        Signal { name: "showcolorChanged" }
        Signal { name: "pointtextChanged" }
        Signal { name: "currentEditorViewChanged" }
        Signal { name: "zoom_sizeChanged" }
        Signal { name: "zoomListChanged" }
        Signal { name: "zoomSetChanged" }
        Signal { name: "imageSizeChanged" }
        Signal { name: "zoomRepeaterChanged" }
        Signal { name: "zoomColumnLayoutChanged" }
        Signal { name: "brushColorChanged" }
        Signal { name: "brushSizeChanged" }
        Signal { name: "currentShapeChanged" }
        Signal { name: "previewImageChanged" }
        Signal { name: "tempImageChanged" }
        Signal { name: "imageChanged" }
        Signal { name: "canvasImageChanged" }
        Signal { name: "canvasEditorChanged" }
        Signal { name: "modelIndexChanged" }
        Signal { name: "currentCapStyleChanged" }
        Signal { name: "spraySizeChanged" }
        Signal { name: "currentTextAreaChanged" }
        Signal { name: "wordItemChanged" }
        Signal { name: "fillRectangleChanged" }
        Signal { name: "straw_SampleRecordsChanged" }
        Signal { name: "colorListChanged" }
        Signal { name: "colorSetChanged" }
        Signal { name: "eraserSizeChanged" }
        Signal { name: "eraserOpacityChanged" }
        Signal { name: "lineSizeChanged" }
        Signal { name: "PolyLineSizeChanged" }
        Signal { name: "selectedToolChanged" }
        Method { name: "on_currentEditorViewChanged" }
        Method {
            name: "getPixelColor"
            type: "QColor"
            Parameter { name: "imagepath"; type: "QString" }
            Parameter { name: "x"; type: "int" }
            Parameter { name: "y"; type: "int" }
        }
        Method {
            name: "showcolorSet"
            Parameter { name: "color"; type: "QColor" }
        }
        Method {
            name: "getPointPositon"
            Parameter { name: "x"; type: "int" }
            Parameter { name: "y"; type: "int" }
        }
        Method {
            name: "setScaleFactor"
            Parameter { name: "Scalemultiple"; type: "float" }
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "returnScale"
            Parameter { name: "Scalenumber"; type: "double" }
        }
        Method {
            name: "getSize"
            Parameter { name: "size"; type: "QString" }
        }
        Method {
            name: "getRepeaterIndex"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "draw"
            Parameter { name: "x"; type: "int" }
            Parameter { name: "y"; type: "int" }
            Parameter { name: "isTemporary"; type: "bool" }
        }
        Method {
            name: "startDrawing"
            Parameter { name: "x"; type: "int" }
            Parameter { name: "y"; type: "int" }
        }
        Method {
            name: "continueDrawing"
            Parameter { name: "x"; type: "int" }
            Parameter { name: "y"; type: "int" }
            Parameter { name: "isTemporary"; type: "bool" }
        }
        Method {
            name: "stopDrawing"
            Parameter { name: "x"; type: "int" }
            Parameter { name: "y"; type: "int" }
        }
        Method { name: "finishDrawing" }
        Method { name: "setShapeToRectangle" }
        Method { name: "setShapeToEllipse" }
        Method { name: "setShapeToCircle" }
        Method { name: "setShapeToPolygon" }
        Method { name: "setShapeToFreeDraw" }
        Method { name: "setShapeToPenDraw" }
        Method { name: "setShapeToSprayDraw" }
        Method { name: "setShapeToLineDraw" }
        Method { name: "setShapeToPolylineDraw" }
        Method { name: "setShapeToCurveDraw" }
        Method { name: "setShapeToEraser" }
        Method { name: "setShapeToColoredEraser" }
        Method {
            name: "setCurrentBrushSize"
            Parameter { name: "newBrushSize"; type: "int" }
        }
        Method {
            name: "setCapStyle"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "setSpraySize"
            Parameter { name: "newSpraySize"; type: "int" }
        }
        Method {
            name: "setEraserSize"
            Parameter { name: "newEraserSize"; type: "int" }
        }
        Method {
            name: "setTextFamily"
            Parameter { name: "family"; type: "QString" }
        }
        Method {
            name: "setWordSize"
            Parameter { name: "size"; type: "int" }
        }
        Method {
            name: "setTextColor"
            Parameter { name: "color"; type: "QColor" }
        }
        Method {
            name: "setBold"
            Parameter { name: "bold"; type: "bool" }
        }
        Method {
            name: "setItalic"
            Parameter { name: "italic"; type: "bool" }
        }
        Method {
            name: "setStrikeout"
            Parameter { name: "strikeout"; type: "bool" }
        }
        Method {
            name: "setUnderline"
            Parameter { name: "underline"; type: "bool" }
        }
        Method { name: "updateBrushColor" }
        Method { name: "initalColor"; type: "QColor" }
        Method { name: "initalSource"; type: "QUrl" }
        Method { name: "initalSize"; type: "int" }
        Method {
            name: "setFillRectangle"
            Parameter { name: "newFillRectangle"; type: "bool" }
        }
        Method {
            name: "setEraserOpacity"
            Parameter { name: "newEraserOpacity"; type: "int" }
        }
        Method {
            name: "setLineSize"
            Parameter { name: "newLineSize"; type: "int" }
        }
        Method {
            name: "setPolyLineSize"
            Parameter { name: "newPolyLineSize"; type: "int" }
        }
    }
}
